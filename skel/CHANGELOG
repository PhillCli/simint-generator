v0.8
Released ****-**-**
--------------------
* Rename double[2,4,8] to simint_double[2,4,8] to prevent name
  collisions with CUDA
* Better CPU feature flags for Intel and GCC compilers
* Fix issues related to derivatives
* Add Fortran interface
* Fix issues with conditional compilation of derivative
  and fortran tests/examples


v0.7
Released 2017-03-28
---------------------
* Tarball supports higher AM (7)
  * Compilation to lower AM is supported (SIMINT_MAXAM variable)
* Fix bad logic in primitive screening code
* Some cmake tweaks
  * SIMINT_STANDALONE - as self-contained library as possible
  * Standardized install paths
  * More proper simintConfig.cmake file
* Better handling of restrict keyword


v0.6
Released 2017-01-24
---------------------
* Fixed major bug in SSE and AVX512 contraction code
* Implemented vectorized Boys function
* Fixes some issues with Clang


v0.5
Released 2017-01-19
---------------------
* Interface changes:
  * simint_compute_eri_sharedwork has been changed to
    simint_compute_eri and the old simint_compute_eri has
    been removed.

* Separate microarchitecture packages reduced to one
* Compiler fixes for GCC and Intel
* Experimental support for Intel KNL
* Better handling of permutational symmetry for higher AM


v0.4
Released 2016-11-08
---------------------
* Compilation works with GCC
* Implemented primitive screening (Schwarz screening)
* Interface changes
    * Add screening arguments to some functions
    * Convenience header "simint/simint.h"
* Fix miscellaneous rough edges in the build
  * Now CMAKE_BUILD_TYPE and arguments such as "-xavx" do not need to be
    passed explicitly to cmake 
  * OpenMP is not needed to build the library itself
* SSE version is re-enabled
* Static linking of Intel + MKL


v0.3
Released 2016-09-23
---------------------
* Interface changes: Consistent function names and arguments
* Workaround for bug in Intel 2017 compiler
* Removed benchmark/testing interface to libint/liberd
* Added permutations of angular momentum (ie, ( s p | s s ), etc)
* Benchmark code is now threaded
